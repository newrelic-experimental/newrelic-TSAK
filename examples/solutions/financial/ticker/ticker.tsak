//
// Fetching stock quotes
//    This script stock information from Yahoo for the specific tickedr symbol
//    and sending data to New Relic
//
fmt     = import("fmt")
net     = import("net")
os      = import("os")
log     = import("tlog")
stdlib  = import("stdlib")
time    = import("time")
djson   = import("djson")
strconv = import("strconv")
h       = import("convert/humanize")
market  = import("nostdlib/finance/quote")
ring    = import("stdlib/ringbuffer")
conf    = import("conf")


if VMNAME == "in" {
  //
  // Data/Configuration acquisition
  //
  for ! stdlib.ExitRequested() {
    time.Sleep(INLOOPWAIT * time.Second)
    stock, err = market.Ticker(SYMBOL)
    if err != nil {
      log.Error(fmt.Sprintf("Error fetching %v: %v", SYMBOL, err))
      continue
    }
    pkt = djson.New()
    pkt.Set(stdlib.NowMilliseconds(),     "timestamp")
    pkt.Set(conf.EventType(),             "eventType")
    pkt.Set(PROXYNAME,                    "proxyName")
    pkt.Set(SYMBOL,                       "name")
    pkt.Set(stock.RegularMarketPrice,             "value")
    pkt.Set(stock.RegularMarketPreviousClose,     "close")
    pkt.Set(stock.RegularMarketOpen,              "open")
    pkt.Set(stock.RegularMarketDayHigh,           "dayHigh")
    pkt.Set(stock.RegularMarketDayLow,            "dayLow")
    pkt.Set(stock.MarketState,                    "marketState")
    pkt.Set(stock.RegularMarketVolume,            "volume")
    pkt.Set(stock.PreMarketPrice,                 "preMarketPrice")
    pkt.Set(stock.PostMarketPrice,                "postMarketPrice")
    pkt.Set(stock.QuoteDelay,                     "delay")
    pkt.Set(stock.FiftyDayAverage,                "fiftyDay")
    pkt.Set(stock.FiftyTwoWeekLow,                "fiftytwoWeekLow")
    pkt.Set(stock.FiftyTwoWeekHigh,               "fiftytwoWeekHigh")
    pkt.Set(stock.TwoHundredDayAverage,           "twohundreddayAvg")
    fmt.Println(pkt)
    stdlib.To(stdlib.INCH, pkt.String())
  }

} else if VMNAME == "proc" {
  //
  // Data processor
  //
  for ! stdlib.ExitRequested() {
    for stdlib.Len(stdlib.INCH) > 0 {
      data = stdlib.From(stdlib.INCH)
      pkt = djson.Parse(data)
      stdlib.To(stdlib.OUTCH, pkt.String())
    }
    time.Sleep(PROCLOOPWAIT * time.Second)
  }
} else if VMNAME == "out" {
  //
  // Data delivery
  //
  for ! stdlib.ExitRequested() {
    N = 0
    pkg = djson.New()
    pkg.Array()
    for stdlib.Len(stdlib.OUTCH) > 0 {
      if N > INBATCH {
        break
      }
      data = stdlib.From(stdlib.OUTCH)
      dpkt = djson.Parse(data)
      pkg.ArrayAppend(dpkt.Data())
      N += 1
    }
    if N > 0 {
      sndres, err, resp = log.SendEvent(pkg.String())
      if sndres && err == nil {
        usize = h.Bytes(len(pkg.String()))
        msg = fmt.Sprintf("ZABBIX.Out %v elements in batch, %s uncompressed, UUID=%s", N, usize, resp.Path("uuid").Data())
        log.Info(msg)
      } else {
        log.Error(fmt.Sprintf("ZABBIX.Out sending error: %s", err))
      }
    }
    time.Sleep(OUTLOOPWAIT * time.Second)
  }
} else if VMNAME == "house" {
  //
  // Housekeeper
  //
} else {
  log.Trace("If you see this message, please open a bug report")
}

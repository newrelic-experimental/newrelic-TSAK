//
// TSAK NOOP Universal script
//    This script doing nothing, except looping in IN, reading in PROC
//    OUT will send it to New Relic
//
fmt     = import("fmt")
net     = import("net")
os      = import("os")
snmp    = import("protocols/snmp")
log     = import("tlog")
stdlib  = import("stdlib")
time    = import("time")
djson   = import("djson")
ioutil  = import("io/ioutil")
bc      = import("bc")
strconv = import("strconv")
h       = import("convert/humanize")


if VMNAME == "in" {
  //
  // Data/Configuration acquisition
  //
  addr , err = net.ResolveUDPAddr("udp", LISTEN)
  if err != nil {
    log.Trace(fmt.Sprintf("Error resolving address: %s", err))
  }
  conn , err = net.ListenUDP("udp", addr)
  if err != nil {
    log.Trace(fmt.Sprintf("Error listening address: %s", err))
  }

  buf = make([]byte, BUFSIZE)
  if err == nil {
    for ! stdlib.ExitRequested() {
      conn.SetReadDeadline(time.Now().Add(TIMEOUT * time.Second))
      n, addr, err = conn.ReadFromUDP(buf)
      if err {
        log.Error(fmt.Sprintf("Error reading from UDP: %s\n", err))
        continue
      }
      if len(buf) > 0 {
        msg = buf[:n]
        res = snmp.ParseTrap(conn, buf, n)
        for x,y in res.VarBinds {
          payload = djson.New()
          payload.Set(x, "oid")
          payload.Set(y, "value")
          payload.Set(res.Address, "hosthame")
          stdlib.To(stdlib.INCH, payload.String())
        }
      }
    }
    conn.Close()
  }

} else if VMNAME == "proc" {
  //
  // Data processor
  //
  for ! stdlib.ExitRequested() {
    for stdlib.Len(stdlib.INCH) > 0 {
      data = stdlib.From(stdlib.INCH)
      pkt = djson.Parse(data)
      pkt.Set(stdlib.NowMilliseconds(), "timestamp")
      pkt.Set(PROXYNAME,                "proxyName")
      pkt.Set(SOURCE,                   "eventType")
      oid = pkt.Path("oid").Data()
      symb = snmp.SYMBOL(oid)
      if symb == "" {
        pkt.Set(oid, "name")
      } else {
        pkt.Set(symb, "name")
      }
      fmt.Println(pkt.String())
      stdlib.To(stdlib.INCH, pkt.String())
    }
    time.Sleep(PROCLOOPWAIT * time.Second)
  }
} else if VMNAME == "out" {
  //
  // Data delivery
  //
  for ! stdlib.ExitRequested() {
    N = 0
    pkg = djson.New()
    pkg.Array()
    for stdlib.Len(stdlib.OUTCH) > 0 {
      if N > INBATCH {
        break
      }
      data = stdlib.From(stdlib.OUTCH)
      dpkt = djson.Parse(data)
      pkg.ArrayAppend(dpkt.Data())
      N += 1
    }
    if N > 0 {
      sndres, err, resp = log.SendEvent(pkg.String())
      if sndres && err == nil {
        usize = h.Bytes(len(pkg.String()))
        msg = fmt.Sprintf("SNMPTRAP.Out %v elements in batch, %s uncompressed, UUID=%s", N, usize, resp.Path("uuid").Data())
        log.Info(msg)
      } else {
        log.Error(fmt.Sprintf("SNMPTRAP.Out sending error: %s", err))
      }
    }
    time.Sleep(OUTLOOPWAIT * time.Second)
  }
} else if VMNAME == "house" {
  //
  // Housekeeper
  //
} else {
  log.Trace("If you see this message, please open a bug report")
}

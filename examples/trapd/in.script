stdlib = import("stdlib")
fmt = import("fmt")
os = import("os")
net = import("net")
snmp = import("snmp")
log = import("tlog")
time = import("time")
djson = import("djson")



addr , err = net.ResolveUDPAddr("udp","127.0.0.1:9162")
if err != nil {
  log.Trace(fmt.Sprintf("Error resolving address: %s", err))
}
conn , err = net.ListenUDP("udp", addr)
if err != nil {
  log.Trace(fmt.Sprintf("Error listening address: %s", err))
}

buf = make([]byte, 3000)
if err == nil {
  for ! stdlib.ExitRequested() {
    conn.SetReadDeadline(time.Now().Add(1 * time.Second))
    n, addr, err = conn.ReadFromUDP(buf)
    if err {
      fmt.Printf("%s\n", err)
      continue
    }
    if len(buf) > 0 {
      msg = buf[:n]
      res = snmp.ParseTrap(conn, buf, n)
      for x,y in res.VarBinds {
        payload = djson.New()
        payload.Set(x, "oid")
        payload.Set(y, "value")
        payload.Set(res.Address, "host.address")
        payload.Set(stdlib.NowMilliseconds(), "timestamp")
        payload.Set("snmptrapper", "source")
        stdlib.To(stdlib.INCH, payload.String())
      }
    }
  }
  conn.Close()
}
